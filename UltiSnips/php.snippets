clearsnippets

extends html

snippet php "PHP inline block"
<?php $0 ?>
endsnippet

snippet phpb "PHP block"
<?php
$0${1:
?>}
endsnippet

snippet phpe "PHP echo inline"
<?php echo $0 ?>
endsnippet

snippet e "echo function" 
echo ${1:'${2:string}'};
endsnippet

snippet vard "var_dump function" 
var_dump(${1:\$${2:variable}});${3:
exit;}$0
endsnippet

snippet th "Outputs $this-> variable"
$this->${1:${2:variable} = ${3:'${4:value}'};}
endsnippet

snippet globals "GLOBALS variable use or assignment"
\$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}$0
endsnippet

snippet $_ "COOKIE global variable"
\$_COOKIE['${1:variable}']
endsnippet

snippet $_ "ENV Global variable"
\$_ENV['${1:variable}']
endsnippet

snippet $_ "FILES global variable"
\$_FILES['${1:variable}']
endsnippet

snippet $_ "GET global variable"
\$_GET['${1:variable}']
endsnippet

snippet $_ "POST global variable"
\$_POST['${1:variable}']
endsnippet

snippet $_ "REQUEST global variable"
\$_REQUEST['${1:variable}']
endsnippet

snippet $_ "SERVER global variable"
\$_SERVER['${1:variable}']
endsnippet

snippet $_ "SESSION global variable"
\$_SESSION['${1:variable}']
endsnippet

snippet fore "foreach loop"
foreach (\$${1:variable} as \$${2:key}${3: => \$${4:value}})
{
    $5
}
endsnippet

snippet for "for loop"
for (\$${1:i} = ${2:0}; \$$1 < ${3:$var}; \$$1${4:++}) 
{
    ${0:// code...}
}
endsnippet

snippet while "while statement" 
while (${1:$a <= 10}) 
{
	${0:// code...}
}

endsnippet

snippet if "if condition"
if (${1:condition}) 
{
    ${2:// code...}
}
$0
endsnippet

snippet elif "elseif condition"
elseif (${1:condition}) 
{
    ${2:// code...}
}
$0
endsnippet

snippet el "else condition"
else
{
    ${0:// code...}
}
endsnippet

snippet ifelif "if with elseif condition"
if (${1:condition}) 
{
    ${2:// code...}
}
elseif (${3:condition}) 
{
    ${4:// code...}
}
$0
endsnippet

snippet ifelife "if, elseif and else condition"
if (${1:condition}) 
{
    ${2:// code...}
}
elseif (${3:condition}) 
{
    ${4:// code...}
}
else
{
    ${0:// code...}
}
endsnippet

snippet if? "Conditional with ternary operator"
\$${1:value} = ${2:(${3:condition})} ? ${4:a} : ${5:b};
endsnippet

snippet fun "Function (class or standalone)"
${1:${2:public} }function ${3:FunctionName}(${4:\$${5:value}${6: = ''}})
{
    ${0:// code...}
}
endsnippet

snippet heredoc "Heredoc string"
<<<${1:HTML}
${2:content here}
$1;
endsnippet

snippet incl "include statement"
include ${1:dirname(${2:__FILE__}).}'${3:/${4:file}}';$0
endsnippet

snippet incl1 "include once statement"
include_once ${1:dirname(${2:__FILE__}).}'${3:/${4:file}}';$0
endsnippet

snippet req "require statement"
require ${1:dirname(${2:__FILE__}).}'${3:/${4:file}}';$0
endsnippet

snippet req1 "require once statement"
require_once ${1:dirname(${2:__FILE__}).}'${3:/${4:file}}';$0
endsnippet

snippet dn "dirname function" i
dirname(${1:__FILE__})
endsnippet

snippet ret "return"
return$1;$0
endsnippet

snippet ret0 "return FALSE"
return FALSE;
endsnippet

snippet ret1 "return TRUE"
return TRUE;
endsnippet

snippet switch "Switch statement"
switch (${1:variable}) 
{
    case ${4:'value'}:
        ${5:// code...}${6:
        break;${7:
    $8}${2:
    default:
        ${3:// code...}
        break;}}
}$0
endsnippet

snippet case "Case statement"
case ${1:'value'}:
    ${2:// code...}${3:
    break;${4:
$5}}$0
endsnippet

snippet do "do...while statement"
do 
{
	${0:// code...}

} while (${1:$a <= 10});
endsnippet

snippet pub "public word"
public
endsnippet

snippet pro "protected word"
protected
endsnippet

snippet pri "private word"
private
endsnippet

snippet classv "Class variable"
/**
 * ${6:$2}
 *
 * @var ${7:string}
 **/
${1:public} \$${2:variable}${3: = ${4:'${5:value}'}};$0
endsnippet

snippet classc "Class constant"
/**
 * ${4:$1}
 *
 * @const
 **/
const ${1:CONSTANT}${2: = ${2:'${3:value}'}};$0
endsnippet

snippet class "Class statement"
/**
 * ${3:$2}
 *
 * @package ${4:`!v g:pdv_cfg_Package`}
 * @copyright ${5:`!v g:pdv_cfg_Copyright`}
 * @author ${6:`!v g:pdv_cfg_Author`}
 **/
$1class $2
{
    
    $0

} // End $2
endsnippet

snippet class "Extends Class statement"
/**
 * ${4:$2}
 *
 * @uses $3
 * @package ${5:`!v g:pdv_cfg_Package`}
 * @copyright ${6:`!v g:pdv_cfg_Copyright`}
 * @author ${7:`!v g:pdv_cfg_Author`}
 **/
$1class ${2:My_Class} extends ${3:Parent_Class}
{
    
    $0

} // End $2
endsnippet

snippet class "Implements Class statement"
/**
 * ${4:$2}
 *
 * @implements $3
 * @package ${5:`!v g:pdv_cfg_Package`}
 * @copyright ${6:`!v g:pdv_cfg_Copyright`}
 * @author ${7:`!v g:pdv_cfg_Author`}
 **/
$1class ${2:My_Class} implements ${3:Interface}
{
    
    $0

} // End $2
endsnippet


snippet class "Extends and Implements Class statement"
/**
 * ${5:$2}
 *
 * @extends $3
 * @implements $4
 * @package ${6:`!v g:pdv_cfg_Package`}
 * @copyright ${7:`!v g:pdv_cfg_Copyright`}
 * @author ${8:`!v g:pdv_cfg_Author`}
 **/
$1class ${2:My_Class} extends ${3:Parent_Class} implements ${4:Interface}
{
    
    $0

} // End $2
endsnippet

snippet const "Constant"
/**
 * ${4:$1}
 *
 * @const $1${5: ${6:Description}}
 **/
define('${1:MY_CONSTANT}', ${2:'${3}'});$0
endsnippet

snippet def? "Defined function" i
$1defined('$2')$0
endsnippet

snippet ar "Array declaration"
array(${1:
    ${2:// content}
});
endsnippet

snippet ari "Array item"
${1:'${2:key}' => }${3:'${4}'}${5:,
$6}
endsnippet

snippet try "try...catch block"
try
{
    ${3:// code...}
}
catch ($1Exception \$${2:e})
{
    ${4:// code...}
}
endsnippet

snippet throw "throw statement"
throw new $1Exception(${2:'${3:Error Processing Request}'}${4:, ${5:1}});$0
endsnippet

snippet interf "Interface statement" 
interface ${1:Interface_Name}
{

    $0
    
} // End $1
endsnippet
